// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  TEACHER
  ADMIN
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? 
  image         String?
  accounts      Account[]
  role          Role      @default(USER)

  courses       Course[]
  userProgress  UserProgress[]
  purchases     Purchase[]
  stripeCustomer StripeCustomer?
}

alter table profiles enable row level security;


model Course {
  id          String   @id @default(cuid())
  title       String   @db.Text
  description String?  @db.Text
  price       Float?
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapters    Chapter[]
  attachments Attachment[]
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  purchases   Purchase[]

  @@index([title], name: "course_title_index")
}


model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]
}


model Attachment {
  id        String   @id @default(cuid())
  name      String?
  url       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}


model Chapter {
  id        String   @id @default(cuid())
  title     String 
  description String? @db.Text  
  videoUrl  String?   @db.Text
  position     Int
  isPublished Boolean   @default(false)
  isFree     Boolean    @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  muxData    MuxData?
  useProgress UserProgress[]

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}


model MuxData {
  id        String   @id @default(cuid())
  assetId   String
  playbackId String?
  duration  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapterId String    @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}


model UserProgress {
  id          String   @id @default(cuid())
  
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}


model Purchase {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}


model StripeCustomer {
  id        String   @id @default(cuid())
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

 
model Account {
  id                 String  @id @default(cuid())
  userId             String 
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}